<?php

namespace App\Entity;



use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * @ORM\Entity(repositoryClass="App\Repository\AffiliateRepository")
 */
class Affiliate
{


    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $name;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $email;


    /**
     * @ORM\Column(type="string", length=255)
     */
    private $password;

    // ...

    /**
     * @ORM\ManyToMany(targetEntity="App\Entity\AffiliateLink")
     * @ORM\JoinTable(name="affiliate_affiliate_link",
     *      joinColumns={@ORM\JoinColumn(name="affiliate_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="affiliate_link_id", referencedColumnName="id")}
     * )
     */
    private $affiliateLinks;

    public function __construct()
    {
        $this->affiliateLinks = new ArrayCollection();
    }

    // Getters and setters

    public function getPassword(): ?string
    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;

        return $this;
    }


    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;
        return $this;
    }


    public function getAffiliateLinks(): Collection
    {
        return $this->affiliateLinks;
    }


    public function addAffiliateLink(AffiliateLink $affiliateLink): self
    {
        if (!$this->affiliateLinks->contains($affiliateLink)) {
            $this->affiliateLinks[] = $affiliateLink;
            // don't need to set the affiliate link's affiliate here
        }

        return $this;
    }

    public function removeAffiliateLink(AffiliateLink $affiliateLink): self
    {
        if ($this->affiliateLinks->contains($affiliateLink)) {
            $this->affiliateLinks->removeElement($affiliateLink);
            // you might want to handle this differently
        }

        return $this;
    }
}